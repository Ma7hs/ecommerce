generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model activecartsbyuser {
  id            Int         @id @default(autoincrement())
  customerId    Int
  cartsByUserId Int
  cartsbyuser   cartsbyuser @relation(fields: [cartsByUserId], references: [id], map: "ActiveCartsByUser_cartsByUserId_fkey")
  customer      customer    @relation(fields: [customerId], references: [id], map: "ActiveCartsByUser_customerId_fkey")

  @@index([cartsByUserId], map: "ActiveCartsByUser_cartsByUserId_fkey")
  @@index([customerId], map: "ActiveCartsByUser_customerId_fkey")
}

model balance {
  id         Int      @id @default(autoincrement())
  balance    Float
  customerId Int
  customer   customer @relation(fields: [customerId], references: [id], map: "Balance_customerId_fkey")

  @@index([customerId], map: "Balance_customerId_fkey")
}

model cartsbyuser {
  id                Int                 @id @default(autoincrement())
  customerId        Int
  activeCartEnum    String
  activecartsbyuser activecartsbyuser[]
  customer          customer            @relation(fields: [customerId], references: [id], map: "CartsByUser_customerId_fkey")
  productsbycart    productsbycart[]

  @@index([customerId], map: "CartsByUser_customerId_fkey")
}

model customer {
  id                Int                 @id @default(autoincrement())
  photo             String?
  userId            Int
  activecartsbyuser activecartsbyuser[]
  balance           balance[]
  cartsbyuser       cartsbyuser[]
  user              user                @relation(fields: [userId], references: [id], map: "Customer_userId_fkey")
  favorite          favorite[]
  movementextract   movementextract[]

  @@index([userId], map: "Customer_userId_fkey")
}

model favorite {
  id         Int      @id @default(autoincrement())
  customerId Int
  productId  Int
  customer   customer @relation(fields: [customerId], references: [id], map: "Favorite_customerId_fkey")
  product    product  @relation(fields: [productId], references: [id], map: "Favorite_productId_fkey")

  @@index([customerId], map: "Favorite_customerId_fkey")
  @@index([productId], map: "Favorite_productId_fkey")
}

model movementextract {
  id           Int                          @id @default(autoincrement())
  value        Int
  created_at   DateTime                     @default(now())
  movementType movementextract_movementType
  customerId   Int
  customer     customer                     @relation(fields: [customerId], references: [id], map: "MovementExtract_customerId_fkey")

  @@index([customerId], map: "MovementExtract_customerId_fkey")
}

model product {
  id              Int                 @id @default(autoincrement())
  name            String
  description     String
  price           Float
  photo           String
  preparationTime Int?
  productType     product_productType
  favorite        favorite[]
  productsbycart  productsbycart[]
}

model productsbycart {
  id            Int         @id @default(autoincrement())
  created_at    DateTime    @default(now())
  productId     Int
  cartsByUserId Int
  qntd          Int
  total_value   Float
  cartsbyuser   cartsbyuser @relation(fields: [cartsByUserId], references: [id], map: "ProductsByCart_cartsByUserId_fkey")
  product       product     @relation(fields: [productId], references: [id], map: "ProductsByCart_productId_fkey")

  @@index([cartsByUserId], map: "ProductsByCart_cartsByUserId_fkey")
  @@index([productId], map: "ProductsByCart_productId_fkey")
}

model user {
  id         Int           @id @default(autoincrement())
  name       String
  email      String        @unique(map: "User_email_key")
  cpf        String        @unique(map: "User_cpf_key")
  created_at DateTime      @default(now())
  updated_at DateTime
  userType   user_userType
  password   String
  customer   customer[]
}

enum movementextract_movementType {
  DEPOSIT
  SPEND
  RETURN
}

enum product_productType {
  FRITO
  ASSADO
  PF
  BEBIDA
  LANCHE_NATURAL
  SALADA_DE_FRUTA
}

enum user_userType {
  COLABORATOR
  CUSTOMER
}
